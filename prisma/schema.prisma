generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                BigInt     @id @default(autoincrement())
  createdDate       DateTime   @default(now()) @map("created_date")
  updatedDate       DateTime   @default(now()) @map("updated_date")
  uuid              String     @default(uuid()) @db.VarChar(40)
  firstName         String?    @map("first_name") @db.VarChar(255)
  lastName          String?    @map("last_name") @db.VarChar(255)
  phoneNumber       String?    @map("phone_number") @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  password           String     @unique @db.VarChar(255)
  role              RoleEnumType  @default(user)
  lastActive        DateTime?  @map("last_active")
  loginCount        Int        @default(0) @map("login_count")
  activationDate    DateTime?  @map("activation_date")
  active            Boolean    @default(true)
  emailVerified     Boolean    @default(false) @map("email_verified")
  passwordResetToken String?
  verificationCode  String?    @db.Text @unique
  identityVerified  Boolean    @default(false) @map("identity_verified")
  baskets           Basket[]   // Bidirectional relation

  @@unique([email, verificationCode, passwordResetToken])
  @@index([email, verificationCode, passwordResetToken])
}

enum RoleEnumType {
  user
  admin
}

model Basket {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     BigInt
  tire       Tire      @relation(fields: [tireId], references: [id])
  tireId     Int
  rim        Rims      @relation(fields: [rimId], references: [id])
  rimId      Int

  @@index([userId])
}

model Rims {
  @@map(name: "rims")

  id            Int       @id @default(autoincrement())
  sizeR         Int
  studHoles     Int
  pcd           Int
  centerBore    String    @db.VarChar(255)
  rimModel      String    @db.VarChar(255)
  width         Int
  color         String    @db.VarChar(255)
  gram          Int
  description   String    @db.VarChar(255)
  imageUrl      String    @db.VarChar(255)
  price         Int
  score         Int
  baskets       Basket[]  // Bidirectional relation
}

model Tire {
  @@map(name: "tire")

  id              Int       @id @default(autoincrement())
  tireWidth       Int
  tireAspectRatio Int
  rimDiameter     Int
  marka           String    @db.VarChar(255)
  stock           Int
  imageUrl        String    @db.VarChar(255)
  baskets         Basket[]  // Bidirectional relation
}
