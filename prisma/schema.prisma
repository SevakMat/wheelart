generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  createdDate       DateTime   @default(now()) @map("created_date")
  updatedDate       DateTime   @default(now()) @map("updated_date")
  uuid              String     @default(uuid()) @db.VarChar(40)
  firstName         String?    @map("first_name") @db.VarChar(255)
  lastName          String?    @map("last_name") @db.VarChar(255)
  phoneNumber       String?    @map("phone_number") @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  password          String     @unique @db.VarChar(255)
  role              RoleEnumType  @default(user)
  lastActive        DateTime?  @map("last_active")
  loginCount        Int        @default(0) @map("login_count")
  activationDate    DateTime?  @map("activation_date")
  active            Boolean    @default(true)
  emailVerified     Boolean    @default(false) @map("email_verified")
  passwordResetToken String?
  verificationCode  String?    @db.Text @unique
  identityVerified  Boolean    @default(false) @map("identity_verified")
  orders        OrderUser[]

  @@unique([email, verificationCode, passwordResetToken])
  @@index([email, verificationCode, passwordResetToken])
}

enum RoleEnumType {
  user
  admin
}

model Rims {
  @@map(name: "rims")

  id            Int       @id @default(autoincrement())
  sizeR         Int
  studHoles     Int
  pcd           Int
  centerBore    String    @db.VarChar(255)
  rimModel      String    @db.VarChar(255)
  width         Int
  color         String    @db.VarChar(255)
  gram          Int
  description   String    @db.VarChar(255)
  imageUrl      String    @db.VarChar(255)
  price         Int
  score         Int
  orders        Order[]  // Add this line to establish the relation
}


model Tire {
  @@map(name: "tire")

  id              Int       @id @default(autoincrement())
  tireWidth       Int
  tireAspectRatio Int
  rimDiameter     Int
  marka           String    @db.VarChar(255)
  stock           Int
  price           Int
  imageUrl        String    @db.VarChar(255)
  orders          Order[]  // Add this line to establish the relation

}


enum OrderStatusType {
  CREATED
  PROGRESS
  DONE
  CANCEL
}

enum OrderTypeEnum {
  RIM
  TIRE
}

model Order {
  id         Int             @id @default(autoincrement())
  orderType  OrderTypeEnum
  status     OrderStatusType @default(CREATED)
  itemId     Int
  tire       Tire?           @relation(fields: [itemId], references: [id], map: "tire_order_item_id_fkey")
  rims       Rims?           @relation(fields: [itemId], references: [id], map: "rims_order_item_id_fkey")
  users      OrderUser[]
  itemCount  Int             @map("item_count")
  sessionId  String?         @db.VarChar(255)

  @@index([itemId])
}


model OrderUser {
  id         Int      @id @default(autoincrement())
  userId     Int
  orderId    Int
  user       User     @relation(fields: [userId], references: [id], map: "order_user_user_id_fkey")
  order      Order    @relation(fields: [orderId], references: [id], map: "order_user_order_id_fkey")

  @@index([userId])
  @@index([orderId])
}
